/* Generated By:JavaCC: Do not edit this line. Hello.java */
package team;



import java.io.StringReader;



public class Hello implements HelloConstants {

public static void main(String[] args) throws Exception {
//StringReader in=new StringReader();
Hello hello=new Hello(System.in);
Hello.words();

}

  static final public String words() throws ParseException {
Token start,element ;
String language="";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case create:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      start = jj_consume_token(create);

if(start.image.equals("EXIT")) {
  {if (true) return language;}
}
if(!(start.image.equals("ADD"))) {
    break;
}
      element = jj_consume_token(ELEMENT);

if(element.image.equals("IMAGE")) {
String image = img();
System.out.println(image);
language= language +image+"\u005cn";
}
else if(element.image.equals("PARAGRAPH")) {

String para=paragraph();
System.out.println(para);
language= language +para+"\u005cn";

}
else if(element.image.equals("LINK")) {

String lin=linkk();
System.out.println(lin);
language= language +lin+"\u005cn";


}




else if(element.image.equals("HEADING")) {

String head=heading();
System.out.println(head);
language= language +head+"\u005cn";

}



else {

  break;
  }
    }
    jj_consume_token(0);
 {if (true) return language;}
    throw new Error("Missing return statement in function");
  }

  static final public String img() throws ParseException {
Token tok;
String parsedHTML = "";
    tok = jj_consume_token(IMAGE);

String[] s = tok.image.split(" ",3);
int len = s[2].length();
parsedHTML = parsedHTML + "<img src=" + s[2].substring(0,len) + "/>";
 {if (true) return parsedHTML;}
    throw new Error("Missing return statement in function");
  }

  static final public String paragraph() throws ParseException {
Token tok, a;
String text="";
String color="";
String font="";
String parsedHTML="<p";
    tok = jj_consume_token(TEXT);

String[] s = tok.image.split(" ",3);
int len = s[2].length();
text= text + ">" + s[2].substring(1,len-1)+"</p>";//Remove the quotations.

    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      a = jj_consume_token(and);


      tok = jj_consume_token(decoratedText);

String[] st = tok.image.split(" ", 3);
int l = st[2].length();
if(st[1].equals("COLOR")){
color = st[2].substring(1,l-1);
}
if(st[1].equals("FONT")){
font = st[2].substring(1,l-1) ;
}
    }
if(color.length() >0 || font.length() >0) {
 parsedHTML = parsedHTML +  " style=\u005c"";
if(color.length() >0){
parsedHTML = parsedHTML + "color:" + color + ";";
}
if(font.length() >0){
parsedHTML = parsedHTML + "font-family:" + font + ";";
}
parsedHTML = parsedHTML + "\u005c"";
}
parsedHTML = parsedHTML + text;
 {if (true) return parsedHTML;}
    throw new Error("Missing return statement in function");
  }

  static final public String heading() throws ParseException {
Token tok, a;
String text="";
String color="";
String font="";
String parsedHTML="<h1";
    tok = jj_consume_token(TEXT);

String[] s = tok.image.split(" ",3);
int len = s[2].length();
text= text + ">" + s[2].substring(1,len-1)+"</h1>";//Remove the quotations.

    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      a = jj_consume_token(and);


      tok = jj_consume_token(decoratedText);

String[] st = tok.image.split(" ", 3);

int l = st[2].length();
if(st[1].equals("COLOR")){
color = st[2].substring(1,l-1);
}
if(st[1].equals("FONT")){
font = st[2].substring(1,l-1) ;
}
    }
if(color.length() >0 || font.length() >0) {
 parsedHTML = parsedHTML +  " style=\u005c"";
if(color.length() >0){
parsedHTML = parsedHTML + "color:" + color + ";";
}
if(font.length() >0){
parsedHTML = parsedHTML + "font-family:" + font + ";";
}
parsedHTML = parsedHTML + "\u005c"";
}
parsedHTML = parsedHTML + text;
 {if (true) return parsedHTML;}
    throw new Error("Missing return statement in function");
  }

  static final public String linkk() throws ParseException {
Token tok, a;
String text="";
String url="";
String color="";
String font="";
String parsedHTML="<a";
    tok = jj_consume_token(TEXT);

String[] s = tok.image.split(" ",3);
int len = s[2].length();
text= text + ">" + s[2].substring(1,len-1)+"</a>";//Remove the quotations.

    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      a = jj_consume_token(and);


      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case decoratedText:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        tok = jj_consume_token(decoratedText);

String[] st = tok.image.split(" ", 3);

int l = st[2].length();
if(st[1].equals("COLOR")){
color = st[2].substring(1,l-1);
}
if(st[1].equals("FONT")){
font = st[2].substring(1,l-1) ;
}
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case link:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        tok = jj_consume_token(link);
String[] str = tok.image.split(" ", 3);
int length = str[2].length();
url=url+ str[2].substring(0,length);
      }
    }
parsedHTML=parsedHTML+" href="+url;
if(color.length() >0 || font.length() >0) {
 parsedHTML = parsedHTML + " style=\u005c"";
if(color.length() >0){
parsedHTML = parsedHTML + "color:" + color + ";";
}
if(font.length() >0){
parsedHTML = parsedHTML + "font-family:" + font + ";";
}
parsedHTML = parsedHTML + "\u005c"";
}
parsedHTML = parsedHTML + text;
 {if (true) return parsedHTML;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HelloTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x2000,0x2000,0x2000,0x100,0x800,};
   }

  /** Constructor with InputStream. */
  public Hello(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Hello(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HelloTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Hello(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HelloTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Hello(HelloTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HelloTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
